// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role
  createdAt DateTime @default(now())

  coursesTaught Course[]           @relation("TeacherCourses")
  enrollments   CourseEnrollment[]
  filesUploaded MaterialFile[]
}

model Course {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  startTime   DateTime
  endTime     DateTime
  active      Boolean  @default(true)
  teacherId   Int

  teacher     User               @relation("TeacherCourses", fields: [teacherId], references: [id], onDelete: Cascade)
  enrollments CourseEnrollment[]
  assignments Assignment[]
  materials   MaterialFolder[]
}

model CourseEnrollment {
  userId   Int
  courseId Int

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  submissions AssignmentSubmission[]
  grades      Grade[]

  @@id([userId, courseId])
}

model Assignment {
  id              Int      @id @default(autoincrement())
  courseId        Int
  title           String
  deadline        DateTime
  gradePercentage Float    @db.Real
  handout         String?
  submissionName  String

  course      Course                 @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions AssignmentSubmission[]
  grades      Grade[]
}

model AssignmentSubmission {
  id           Int       @id @default(autoincrement())
  assignmentId Int
  courseId     Int
  userId       Int
  filePath     String
  submittedAt  DateTime  @default(now())

  assignment   Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  enrollment   CourseEnrollment @relation(fields: [userId, courseId], references: [userId, courseId], onDelete: Cascade)

  @@unique([assignmentId, userId])
}


model Grade {
  id           Int     @id @default(autoincrement())
  assignmentId Int
  userId       Int
  courseId     Int
  grade        Float   @db.Real
  comment      String?

  assignment Assignment       @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  enrollment CourseEnrollment @relation(fields: [userId, courseId], references: [userId, courseId], onDelete: Cascade)

  @@unique([assignmentId, userId])
}

model MaterialFolder {
  id        Int              @id @default(autoincrement())
  name      String
  parentId  Int? // null for root folders
  courseId  Int
  course    Course           @relation(fields: [courseId], references: [id])
  parent    MaterialFolder?  @relation("FolderParent", fields: [parentId], references: [id])
  children  MaterialFolder[] @relation("FolderParent")
  files     MaterialFile[]
  createdAt DateTime         @default(now())
}

model MaterialFile {
  id         Int            @id @default(autoincrement())
  folderId   Int
  folder     MaterialFolder @relation(fields: [folderId], references: [id])
  filename   String
  filePath   String // path in Supabase Storage
  uploadedBy Int
  uploader   User           @relation(fields: [uploadedBy], references: [id])
  createdAt  DateTime       @default(now())
}
